# ===================================================================
# ||         CONFIGURATION FOR BACTERIAL ASSEMBLY PIPELINE         ||
# ===================================================================
# This file controls the behavior of the entire Snakemake workflow.
# Edit the values below to match your project's needs.

# -------------------------------------------------------------------
# 1. INPUT DATA CONFIGURATION
# -------------------------------------------------------------------
# The pipeline discovers samples from a TSV (Tab-Separated Values) file.
# The pipeline's definitive source of truth. This file is generated by
# your fetch_or_prompt.py script.
# This is the most scalable way to manage one or hundreds of samples.
resolved_sample_sheet: "config/samples.resolved.tsv"
# If you want to run a quick test with a single sample, you can specify it here.
# Leave as `null` to process all samples in the sample sheet.
test_sample: null  # e.g., "sample_01" or null to run all samples.

# -------------------------------------------------------------------
# 2. RESOURCE AND REFERENCE PATHS
# -------------------------------------------------------------------
# Central location for all external reference files and databases.

resources:
  # Path to the reference genome for evaluation with QUAST.
  reference_genome: "resources/references/ecoli_k12_mg1655.fasta"
  # Add your cutom references here as needed


# -------------------------------------------------------------------
# 3. TOOL-SPECIFIC PARAMETERS
# -------------------------------------------------------------------
# Fine-tune the parameters for each major step in the pipeline.

filtering:
  # If true, reads will be filtered by length and quality.
  enabled: true
  min_length: 1000
  # Discard the worst 5% of reads, keeping the best 95%.
  keep_percent: 95

assembly:
  # Estimated genome size for the assembler (e.g., "4.6m", "2.8k").
  # This is a crucial parameter for Flye.
  genome_size: "4.6m"

# Flye assembler settings
flye:
  # Options: "nano-raw", "nano-hq", "nano-corr"
  # Use "nano-hq" for high-accuracy basecalled reads (e.g., Dorado sup)
  read_type: "nano-hq"


polishing:
  # Medaka model to use for polishing. This must match your basecaller and flowcell.
  # Find available models with `medaka model list`.
  # Common examples: r1041_e82_400bps_sup_g615, r941_min_high_g360
  medaka_model: "r1041_e82_400bps_sup_g615"

# Pilon polisher settings
pilon:
  mem: "24g" # Memory to allocate for the Pilon Java process

annotation:
  # Choose the annotation tool. Options: "prokka" or "bakta".
  # The pipeline will run the selected tool.
  tool: "bakta"
 
 # Prokka annotation settings
  prokka:
    # Additional Prokka parameters can be added here.
    # For example, to specify a custom database:
    # db: "path/to/custom/prokka_db"
    use_genus: true
    use_species: true
    kingdom: "Bacteria"
    gcode: 11  # Genetic code (11 = Bacterial, Archaeal and Plant Plastid)
  
  # Bakta annotation settings
  bakta:
    # Additional Bakta parameters can be added here.
    # Path where the Bakta database will be stored.
    # The pipeline will automatically download it to this location if it's not found.
    bakta_db: "resources/bakta_db"
    force: true  # Overwrite existing output
    threads: 8   # Number of threads to use
# -------------------------------------------------------------------
# 4. GLOBAL THREAD & RESOURCE DEFAULTS
# -------------------------------------------------------------------
# Default number of threads to use for each program.
# These can be overridden for specific rules in the Snakefile if needed.

threads:
  filtlong: 4
  flye: 8
  minimap2: 8
  racon: 8
  medaka: 8
  quast: 4
  prokka: 8
  bakta: 8