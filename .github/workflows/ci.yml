# .github/workflows/ci.yml
name: Snakemake CI

# This workflow is triggered on pushes to the main branch and on pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-pipeline:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      # Step 1: Check out the repository's code
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Mambaforge (a fast Conda installer)
      # Step 2.1: Cache the Conda environment based on the contents of the YAML file
      # This is the key to robust CI. A new environment is created ONLY if the file changes.
      - name: Cache Mamba environment
        uses: actions/cache@v3
        with:
          path: ${{ env.CONDA }}/envs/snakemake_env
          key: ${{ runner.os }}-mamba-${{ hashFiles('pipeline/envs/snakemake.yaml') }}

      # Step 2.2: Set up Mambaforge and create the environment
      # This step will now use the cache if the key matches, or create a fresh env if not.
      - name: Set up Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.9
          mamba-version: "*"
          channels: conda-forge,bioconda,defaults
          channel-priority: strict
          use-mamba: true
     # Step 2.3: Create the environment from the file (if not cached)
     # This step ONLY runs if the cache was not found in Step 1.
     # We use an explicit 'mamba env create' command, which is unambiguous and reliable.
      - name: Create Mamba environment
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          mamba env create --name snakemake_env --file pipeline/envs/snakemake.yaml



      # Step 3: Run the Snakemake dry-run test
      # This is the core of our CI. It checks if the workflow DAG can be built.
      - name: Run Snakemake dry-run
        shell: bash -l {0} # Important: ensures the conda env is active
        run: |
          # We need a dummy manifest for the dry-run to work
          cp data/manifests/run_manifest_template.tsv data/manifests/ci_test_manifest.tsv
          # Run the dry-run. --use-conda tells it to check conda env definitions.
          snakemake --use-conda -n

      # Step 4 (Optional but recommended): Lint the Snakefile for style and errors
      - name: Lint Snakefile
        shell: bash -l {0}
        run: |
          snakemake --lint